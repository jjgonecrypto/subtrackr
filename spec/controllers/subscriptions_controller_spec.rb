require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SubscriptionsController do
  
  let (:user) { FactoryGirl.create(:user) }
  
  describe "GET index" do
    let!(:subscription) { FactoryGirl.create(:subscription, user: user) }
    
    it "assigns all subscriptions as @subscriptions" do
      get :index, :user_id => user.id
      assigns(:subscriptions).should eq([subscription])
    end
  end

  describe "GET show" do
    let!(:subscription) { FactoryGirl.create(:subscription, user: user) }

    it "assigns the requested subscription as @subscription" do
      get :show, :id => subscription.id, :user_id => user.id
      assigns(:subscription).should eq(subscription)
    end
  end

  describe "GET new" do
    it "assigns a new subscription as @subscription" do
      get :new, :user_id => user.id
      assigns(:subscription).should be_a_new(Subscription)
    end
  end

  describe "GET edit" do
    let!(:subscription) { FactoryGirl.create(:subscription, user: user) }
    
    it "assigns the requested subscription as @subscription" do
      get :edit, :id => subscription.id, :user_id => user.id
      assigns(:subscription).should eq(subscription)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      let!(:subscription) { FactoryGirl.attributes_for(:subscription, user: user) }
      
      it "creates a new Subscription" do
        expect {
          post :create, user_id: user.id, subscription: subscription
        }.to change(user.subscriptions, :count).by(1)
      end

      it "assigns a newly created subscription as @subscription" do
        post :create, user_id: user.id, subscription: subscription
        assigns(:subscription).should be_a(Subscription)
        assigns(:subscription).should be_persisted
      end

      it "redirects to the created subscription" do
        post :create, user_id: user.id, subscription: subscription
        response.should redirect_to(user_subscription_path(user, Subscription.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved subscription as @subscription" do
        # Trigger the behavior that occurs when invalid params are submitted
        Subscription.any_instance.stubs(:save).returns(false)
        post :create, user_id: user.id, subscription: {}
        assigns(:subscription).should be_a_new(Subscription)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Subscription.any_instance.stubs(:save).returns(false)
        post :create, user_id: user.id, subscription: {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let!(:subscription) { FactoryGirl.create(:subscription, user: user) }
      
      it "updates the requested subscription" do
        # Assuming there are no other subscriptions in the database, this
        # specifies that the Subscription created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Subscription.any_instance.expects(:update_attributes).with({'these' => 'params'})
        put :update, id: subscription.id, user_id: user.id, subscription: {'these' => 'params'}
      end
      
      it "assigns the requested subscription as @subscription" do
        put :update, id: subscription.id, subscription: subscription.attributes, user_id: user.id
        assigns(:subscription).should eq(subscription)
      end

      it "redirects to the subscription" do
        put :update, id: subscription.id, subscription: subscription.attributes, user_id: user.id
        response.should redirect_to(user_subscription_path(user, subscription))
      end
    end

    describe "with invalid params" do
      let!(:subscription) { FactoryGirl.create(:subscription, user: user) }
      
      it "assigns the subscription as @subscription" do
        # Trigger the behavior that occurs when invalid params are submitted
        Subscription.any_instance.stubs(:save).returns(false)
        put :update, :id => subscription.id, user_id: user.id, subscription: {}
        assigns(:subscription).should eq(subscription)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Subscription.any_instance.stubs(:save).returns(false)
        put :update, id: subscription.id, user_id: user.id, subscription: {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    let!(:subscription) { FactoryGirl.create(:subscription, user: user) }
    
    it "destroys the requested subscription" do
      expect {
        delete :destroy, id: subscription.id, user_id: user.id
      }.to change(Subscription, :count).by(-1)
    end

    it "redirects to the subscriptions list" do
      delete :destroy, :id => subscription.id, user_id: user.id
      response.should redirect_to(user_subscriptions_url)
    end
  end

end
